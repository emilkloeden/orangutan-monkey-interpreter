let lexer = use("../src/lang/lexer.üêµ")
let token = use("../src/lang/token.üêµ")
let arrays = use("../src/stdlib/arrays.üêµ")
let loops = use("../src/stdlib/loops.üêµ")
let parser = use("../src/lang/parser.üêµ")
let evaluator = use("../src/lang/evaluator.üêµ")
let environment = use("../src/lang/environment.üêµ")
let concat = arrays.concat;
let while = loops.while;
let evaluate = evaluator.evaluate;

let equalityTestFn = fn(expected, actual) {
    return actual != null && actual.string == expected.string && actual._type == expected._type
}

let runTests = fn(tests, equalityTestFn) {
    // Loop over expected and actual and compile any failures into failures array
    let i = 0
    let results = []
    let failures = []
    while (fn(){ i < len(tests)}, fn() {
        let test = tests[i]
        let input = test.input
        let expected = test.expected
        
        let l = lexer.newLexer(input);
        let p = parser.newParser(l)
        let program = p.parseProgram()
        
        let env = environment.newEnvironment({}, null);
        let actual = null
        if (program.errors) {
            if (len(program.errors)) {
                map(program.errors, fn(e) { puts(e) })
            }
            failures = append(failures, {"input": input, "expected": expected, "actual": program.errors})
        } else {
            let e = evaluator.Evaluator(program)
            let evaluated = e.evaluate(program, env);
            if (evaluated._type == "OBJECT.ERROR") {
                puts("Evaluation Error: ", evaluated)
            }
            actual = {
                "string": evaluated.toString(),
                "_type": evaluated._type
            }
        }

        

        // puts(program.toString())
        if (equalityTestFn(expected, actual)) {
            results = append(results, ".")
        } else {
            results = append(results, "F")
            failures = append(failures, {"input": input, "expected": expected, "actual": actual})
        }
        
        i = i + 1

    })
// Puts the result string . for pass, F for failure
    puts(join(results,""))
    // If any failures print expected vs actual
    if (len(failures) > 0) {
        let i = 0
        puts(len(failures), "tests FAILED")
        while (fn(){i< len(failures)}, fn() {
            let test = failures[i]
            puts("   ", test.input)
            puts("Expected:
        ", test.expected)
            // puts("type", type(test.actual))
            puts("Actual:
        ", test.actual)
            i = i + 1
        })
    } else {
    // Otherwise print number of test passed
        puts(len(tests), "tests PASSED")
    }
}

let stringTests = [
    {
        "input": '"hello" + " " + "world!"', 
        "expected": { 
            "string": '"hello world!"',
            "_type": "OBJECT.STRING"
        }
    },
    {
        "input": '"hello" == "hello"', 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": '"hello" != "hello"', 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": '"hello" != "world"', 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": '"hello" == "world"', 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    }
]

let integerTests = [
    
    {
        "input": "5;", 
        "expected": {
            "string": "5",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "let a = 5;",
        "expected": {
            "string": "null",
            "_type": "OBJECT.NULL"
        }
    },
    {
        "input": "2 * (5 + 10)",
        "expected": {
            "string": "30",
            "_type": "OBJECT.INTEGER"
        }
    }
]

let booleanTests = [
    {
        "input": "true", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "false", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "1 < 2", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "1 > 2", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "1 < 1", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "1 > 1", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    }
]
let booleanEqualityTests = [
    {
        "input": "1 == 1", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "1 != 1", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "1 == 2", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "1 != 2", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "true == true", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "false == false", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "true == false", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "true != false", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "false != true", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "(1 < 2) == true", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "(1 < 2) == false", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "(1 > 2) == true", 
        "expected": { 
            "string": "false",
            "_type": "OBJECT.BOOLEAN"
        }
    },
    {
        "input": "(1 > 2) == false", 
        "expected": { 
            "string": "true",
            "_type": "OBJECT.BOOLEAN"
        }
    }
]

let ifElseExpressionTests = [
    {
        "input": "if (true) { 10; }", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "if (false) { 10 }", 
        "expected": { 
            "string": "null",
            "_type": "OBJECT.NULL"
        }
    },
    {
        "input": "if (1) { 10; }", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "if (1 < 2) { 10 }", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "if (1 > 2) { 10 }", 
        "expected": { 
            "string": "null",
            "_type": "OBJECT.NULL"
        }
    },
    {
        "input": "if (1 > 2) { 10 } else { 20 }", 
        "expected": { 
            "string": "20",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "if (1 < 2) { 10 } else { 20 }", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    }
]

let returnValueTests = [
    {
        "input": "return 10;", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "return 10; 9;", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "return 2 * 5; 9;", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "9; return 2 * 5; 9;", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "if (10 > 1) { return 10; }", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "if (10 > 1) { if (10 > 1) { return 10; } return 1; }", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "let f = fn(x) { return x; x + 10; }; f(10)", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "let f = fn(x) { let result = x + 10; return result; return 10; }; f(10)", 
        "expected": { 
            "string": "20",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "let identity = fn(x) { x }; identity(10)", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": "fn(x) { x; }(10)", 
        "expected": { 
            "string": "10",
            "_type": "OBJECT.INTEGER"
        }
    }
]

let environmentTests = [
    {
        "input": "let first = 10; let second = 10; let third = 10; let ourFunction = fn(first) {  let second = 20;  first + second + third;}; ourFunction(20) + first + second;", 
        "expected": { 
            "string": "70",
            "_type": "OBJECT.INTEGER"
        }
    }
]

let functionTests = [
    {
        "input": "fn(x) { x * 2 }(10)",
        "expected": { 
            "string": "20",
            "_type": "OBJECT.INTEGER"
        }
    }
]

let closureTests = [
    {
        "input": "let newAdder = fn(x) { fn(y) { x + y }; }; let addTwo = newAdder(2); addTwo(2);",
        "expected": { 
            "string": "4",
            "_type": "OBJECT.INTEGER"
        }
    }
]

let hashLiteralTests = [
    {
        "input": '{ "2": 2, "3": 3}',
        "expected": { 
            "string": '{
    "2": 2,
    "3": 3
}',
            "_type": "OBJECT.HASH"
        }
    },
    {
        "input": 'let a = {"b":"a", 1: 1}; a',
        "expected": {
            "string": 
'{
    "b": "a",
    1: 1
}'
    , "_type": "OBJECT.HASH"
        }
    }
]

let builtinTests = [
    {
        "input": "len([1,2,3,4])",
        "expected": { 
            "string": "4",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": 'len("1234")',
        "expected": { 
            "string": "4",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": 'first([4,3,2,1])',
        "expected": { 
            "string": "4",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": 'rest([4,3,2,1])',
        "expected": { 
            "string": "[
    3,
    2,
    1
]",
            "_type": "OBJECT.ARRAY"
        }
    },
    {
        "input": 'last([4,3,2,1])',
        "expected": { 
            "string": "1",
            "_type": "OBJECT.INTEGER"
        }
    },
    {
        "input": 'push([4,3,2,1], 5)',
        "expected": { 
            "string": "[
    4,
    3,
    2,
    1,
    5
]",
            "_type": "OBJECT.ARRAY"
        }
    }
    
]



let arrayTests = [
    {
        "input": '[1,2,
    3
]',
        "expected": { 
            "string": "[
    1,
    2,
    3
]",
            "_type": "OBJECT.ARRAY"
        }
    },
    {
        "input": '[1,2,
    3
][1]',
        "expected": { 
            "string": "2",
            "_type": "OBJECT.INTEGER"
        }
    }
]

let tests = stringTests
tests = concat(tests, integerTests)
tests = concat(tests, booleanTests)
tests = concat(tests, booleanEqualityTests)
tests = concat(tests, ifElseExpressionTests)
tests = concat(tests, returnValueTests)
tests = concat(tests, environmentTests)
tests = concat(tests, functionTests)
tests = concat(tests, closureTests)
tests = concat(tests, hashLiteralTests)
tests = concat(tests, builtinTests)
tests = concat(tests, arrayTests)

runTests(tests, equalityTestFn)