let Error = fn(message) {
    let toString = fn() {
        "Error: " + message
    }

    return {
        "_type": "OBJECT.ERROR",
        "toString": toString
    }
}

let ReturnValue = fn(value) {
    let toString = fn() {
        if (value == null) {
            "null"
        } else {
            value.toString()
        }
    }

    return {
        "_type": "OBJECT.RETURNVALUE",
        "toString": toString,
        "value": value
    }
}

let Null = fn() {
    let toString = fn() {
        "null"
    }

    let value = null;
    return {
        "_type": "OBJECT.NULL",
        "value": value,
        "toString": toString
    }
}

let Boolean = fn(value) {
    let _value = value
    let toString = fn() {
        if (_value) {
            "true"
        } else {
            "false"
        }
    }

    let hashKey = fn() {
        let key = "0"
        if (_value) {
            key = "1"
        }
        HashKey("OBJECT.BOOLEAN", key)
    }

    return {
        "_type": "OBJECT.BOOLEAN",
        "value": _value,
        "toString": toString,
        "hashKey": hashKey
    }
}

let Integer = fn(value) {
    let _value = int(value)
    let toString = fn() {
        str(_value)
    }

    let hashKey = fn() {
        HashKey("OBJECT.INTEGER", str(value))
    }

    return {
        "_type": "OBJECT.INTEGER",
        "value": _value,
        "toString": toString,
        "hashKey": hashKey
    }
}


let String = fn(value) {
    let _value = str(value)
    let toString = fn() {
        '"' + _value + '"'
    }

    let hashKey = fn() {
        HashKey("OBJECT.STRING", _value)
    }

    return {
        "_type": "OBJECT.STRING",
        "value": _value,
        "toString": toString,
        "hashKey": hashKey
    }
}

let Array = fn(elements) {
    let toString = fn() {
        return "[
    " + join(map(elements, fn(e) {e.toString()}), ",
    ") +  "
]"
    }
    return {
        "_type": "OBJECT.ARRAY",
        "elements": elements,
        "toString": toString,
    }
}

let HashKey = fn(_type, value) {
    let toString = fn() {
        _type + ":" + value
    }
    // TODO: check if we should return _type or "OBJECT.HASHKEY"
    return {
        "_type": _type,
        "toString": toString
    }
}

let HashPair = fn(key, value) {
    return {
        "_type": "OBJECT.HASHPAIR",
        "key": key,
        "value": value
    }
}

let Hash = fn(pairs) {
    let toString = fn() {
        let values = join(map(values(pairs), fn(pair) {
            let key = pair.key
            let value = pair.value
            let keyString = key.toString()
            let valueString = value.toString()
            // if (instanceOf(key, "OBJECT.STRING")) {
            //     keyString = '"' + keyString + '"'
            // }
            // if (instanceOf(value, "OBJECT.STRING")) {
            //     valueString = '"' + valueString + '"'
            // }
            return keyString + ": " + valueString
        }), ",
    ")
    return "{
    " + values +"
}"
    }
    
    return {
        "_type": "OBJECT.HASH",
        "toString": toString,
        "pairs": pairs
    }
}

let Function = fn(parameters, body, env) {
    let _parameters = parameters
    let _body = body
    let _env = env

    let toString = fn() {
        let paramsString = join(map(parameters, fn(p) {p.toString()}), ", ")
        let bodyString = body.toString()
        return "fn (" + paramsString + ") {
    " + bodyString +"
}"
    }
    return {
        "_type": "OBJECT.FUNCTION",
        "toString": toString,
        "parameters": fn() { _parameters } (),
        "body": fn() { _body } (),
        "env": fn() { _env } ()
    }
}

let BuiltIn = fn(func) {
    let toString = fn() {"builtin function"}
    return {
        "_type": "OBJECT.BUILTIN",
        "toString": toString,
        "fn": func
    }
}