let loops = use("../stdlib/loops.üêµ")
let token = use("token.üêµ");
let lexer = use("lexer.üêµ");
let ast = use("ast.üêµ");

let while = loops.while;
let TokenType = token.TokenType;
let newLexer = lexer.newLexer;

let Precedence = {
    "LOWEST": 0,
    "OR": 2,
    "AND": 3,
    "ASSIGN": 4,
    "EQUALS": 5,
    "LESSGREATER": 6,
    "SUM": 7,
    "PRODUCT": 8,
    "MODULO": 9,
    "PREFIX": 10,
    "CALL": 11,
    "INDEX": 12,
}

let precedences = {
    TokenType["EQ"]: Precedence["EQUALS"],
    TokenType["NOT_EQ"]: Precedence["EQUALS"],
    TokenType["LT"]: Precedence["LESSGREATER"],
    TokenType["LTE"]: Precedence["LESSGREATER"],
    TokenType["GT"]: Precedence["LESSGREATER"],
    TokenType["GTE"]: Precedence["LESSGREATER"],
    TokenType["PLUS"]: Precedence["SUM"],
    TokenType["MINUS"]: Precedence["SUM"],
    TokenType["SLASH"]: Precedence["PRODUCT"],
    TokenType["ASTERISK"]: Precedence["PRODUCT"],
    TokenType["MODULO"]: Precedence["MODULO"],
    TokenType["AND"]: Precedence["AND"],
    TokenType["OR"]: Precedence["OR"],
    TokenType["LPAREN"]: Precedence["CALL"],
    TokenType["LBRACKET"]: Precedence["INDEX"],
    TokenType["PERIOD"]: Precedence["INDEX"],
    TokenType["ASSIGN"]: Precedence["ASSIGN"],
}

let newParser = fn(l) {
    let lexer = l;
    let errors = [];
    let currentToken = lexer.nextToken();
    let peekToken = lexer.nextToken();

    let prefixParseFns = fn () {
        {
            TokenType["IDENT"]: parseIdentifier,
            TokenType["INT"]: parseIntegerLiteral,
            TokenType["BANG"]: parsePrefixExpression,
            TokenType["MINUS"]: parsePrefixExpression,
            TokenType["TRUE"]: parseBoolean,
            TokenType["FALSE"]: parseBoolean,
            TokenType["LPAREN"]: parseGroupedExpression,
            TokenType["IF"]: parseIfExpression,
            TokenType["FUNCTION"]: parseFunctionLiteral,
            TokenType["STRING"]: parseStringLiteral,
            TokenType["NULL"]: parseNullLiteral,
            TokenType["LBRACKET"]: parseArrayLiteral,
            TokenType["LBRACE"]: parseHashLiteral,   
        }
    }
    
    let infixParseFns = fn (){
        {
            TokenType["PLUS"]: parseInfixExpression,
            TokenType["MINUS"]: parseInfixExpression,
            TokenType["SLASH"]: parseInfixExpression,
            TokenType["ASTERISK"]: parseInfixExpression,
            TokenType["MODULO"]: parseInfixExpression,
            TokenType["EQ"]: parseInfixExpression,
            TokenType["NOT_EQ"]: parseInfixExpression,
            TokenType["AND"]: parseInfixExpression,
            TokenType["OR"]: parseInfixExpression,
            TokenType["LT"]: parseInfixExpression,
            TokenType["LTE"]: parseInfixExpression,
            TokenType["GT"]: parseInfixExpression,
            TokenType["GTE"]: parseInfixExpression,
            TokenType["LPAREN"]: parseCallExpression,
            TokenType["LBRACKET"]: parseIndexExpression,
            TokenType["ASSIGN"]: parseAssignExpression,
        }
    }
    
    let nextToken = fn() {
        currentToken = peekToken;
        peekToken = lexer.nextToken()
    }

    let parseBoolean = fn() {
        return ast.newBoolean(currentToken, currentTokenIs("TRUE"))
    }

    let parseIdentifier = fn() {
        return ast.newIdentifier(currentToken, currentToken.literal)
    }

    let parseIntegerLiteral = fn() {
        // puts("---parseIntegerLiteral", currentToken)
        return ast.newIntegerLiteral(currentToken, currentToken.literal)
    }

    let parseStringLiteral = fn() {
        return ast.newStringLiteral(currentToken, currentToken.literal)
    }

    let parseNullLiteral = fn() {
        return ast.newNullLiteral(currentToken, currentToken.literal)
    }

    let parseArrayLiteral = fn() {
        return ast.newArrayLiteral(currentToken, parseExpressionList("RBRACKET"));
    };

    let parseHashLiteral = fn() {
        let tok = currentToken
        pairs = {}
        while(fn(){!peekTokenIs("RBRACE")}, fn() {
            nextToken()
            let key = parseExpression(Precedence.LOWEST)

            if (!expectPeek("COLON")) {
                return null
            }
            nextToken()
            let value = parseExpression(Precedence.LOWEST)

            pairs[key] = value
            if (!peekTokenIs("RBRACE") && !expectPeek("COMMA")) {
                return null
            }
        })
        if (!expectPeek("RBRACE")) {
            return null
        }
        return ast.newHashLiteral(tok, pairs)
    }

    let parseFunctionLiteral = fn() {
        let tok = currentToken

        if (!expectPeek("LPAREN")) {
            return null
        }
        let parameters = parseFunctionParameters()

        if (!expectPeek("LBRACE")) {
            return null
        }
        let body = parseBlockStatement()
        return ast.newFunctionLiteral(tok, parameters, body)
    }

    let parseFunctionParameters = fn() {
        let identifiers = []
        if (peekTokenIs("RPAREN")) {
            nextToken()
            return identifiers;
        }
        nextToken()
        let ident = ast.newIdentifier(currentToken, currentToken.literal)
        identifiers = append(identifiers, ident)

        while(fn() {peekTokenIs("COMMA")}, fn() {
            nextToken()
            nextToken()
            ident = ast.newIdentifier(currentToken, currentToken.literal)
            identifiers = append(identifiers, ident)
        })
        if (!expectPeek("RPAREN")) {
            return null
        }
        return identifiers
    }

    let parseProgram = fn() {
        // puts("---parseProgram")
        let statements = []
        while(fn(){currentToken.tokenType != "EOF"}, fn(){
            let stmt = parseStatement()
            if (stmt != null) {
                statements = append(statements, stmt)
            }
            nextToken()
        })
        return ast.newProgram(statements)
    }


    let parseStatement = fn() {
        // puts("---parseStatement")
        if (currentToken.tokenType == "COMMENT") {
        // puts("---next parseCommentStatement")
            return parseCommentStatement();
        }
        if (currentToken.tokenType == "LET") {
        // puts("---next parseLetStatement")
            return parseLetStatement();
        }
        if (currentToken.tokenType == "RETURN") {
        // puts("---next parseReturnStatement")
            return parseReturnStatement();
        }
        // puts("---next parseExpressionStatement")
        return parseExpressionStatement();
    }

    let parseCommentStatement = fn() {
        return ast.newComment(currentToken, currentToken.literal)
    }

    let parseLetStatement = fn() {
        // puts("---parseLetStatement")
        // puts("currentToken", currentToken)
        let tok = currentToken;

        if (!expectPeek("IDENT")) {
            return null
        }
        let name = ast.newIdentifier(currentToken, currentToken.literal)
        if (!expectPeek("ASSIGN")) {
            return null
        }
        nextToken()
        let value = parseExpression(Precedence.LOWEST)
        
        if (peekTokenIs("SEMICOLON")) {
            nextToken()
        }
        let stmt = ast.newLetStatement(tok, name, value);
        return stmt
    }

    let parseReturnStatement = fn() {
        let tok = currentToken
        nextToken()
        let returnValue = parseExpression(Precedence.LOWEST)

        if (peekTokenIs("SEMICOLON")) {
            nextToken()
        }
        return ast.newReturnStatement(tok, returnValue)
    }

    let parseBlockStatement = fn() {
        let tok = currentToken
        let statements = []
        nextToken()

        while (fn(){!currentTokenIs("RBRACE") && !currentTokenIs("EOF")}, fn() {
            let stmt = parseStatement()
            if (stmt != null) {
                statements = append(statements, stmt)
            }
            nextToken()
        })
        return ast.newBlockStatement(tok, statements)
    }

    let parseExpressionStatement = fn() {
        // puts("---parseExpressionStatement")
        let tok = currentToken
        let expression = parseExpression(Precedence.LOWEST)

        if (peekTokenIs("SEMICOLON")) {
            nextToken()
        }
        return ast.newExpressionStatement(tok, expression);
    }
    
    let parseExpression = fn(precedence) {
        let prefix = prefixParseFns()[TokenType[currentToken.tokenType]]
        if (prefix == null) {
            puts("No prefix function found for token:", currentToken)
            noPrefixParseFnError(currentToken)
            return null;
        }

        let leftExp = prefix()
        while(fn(){!peekTokenIs("SEMICOLON") && precedence < peekPrecedence()}, fn(){
            let infix = infixParseFns()[TokenType[peekToken.tokenType]]
            if (infix == null) {
                return null;
            }
            nextToken()
            leftExp = infix(leftExp)
        })
        return leftExp
        
    }

    let noPrefixParseFnError = fn(token) {
        errors = append(errors, "No prefixParse func for token type '" + token.tokenType + "' found.")
    }
   
    let parsePrefixExpression = fn() {
        let expression = ast.newPrefixExpression(currentToken, currentToken.literal);
        nextToken()
        expression["right"] = parseExpression(Precedence.PREFIX)
        return expression
    }

    let parseInfixExpression = fn(left) {
        let tok = currentToken
        let precedence = currentPrecedence()
        nextToken()
        let right = parseExpression(precedence)
        return ast.newInfixExpression(tok, tok.literal, left, right)
    }

    let parseGroupedExpression = fn() {
        nextToken()
        let expression = parseExpression(Precedence.LOWEST)

        if (!expectPeek("RPAREN")) {
            return null
        }
        return expression
    }

    let parseIfExpression = fn() {
        let tok = currentToken
        if (!expectPeek("LPAREN")) {
            return null;
        }
        nextToken()
        let condition = parseExpression(Precedence.LOWEST)

        if (!expectPeek("RPAREN")) {
            return null
        }
        if (!expectPeek("LBRACE")) {
            return null
        }
        let consequence = parseBlockStatement()
        if (peekTokenIs("ELSE")) {
            nextToken()
            if (!expectPeek("LBRACE")) {
                return null
            }
            let alternative = parseBlockStatement()
        }
        return ast.newIfExpression(tok, condition, consequence, alternative)
        
    }

    let parseCallExpression = fn(func) {
        let tok = currentToken
        let arguments = parseExpressionList("RPAREN")
        return ast.newCallExpression(tok, func, arguments)
    }

    let parseAssignExpression = fn(target) {
        let tok = currentToken
        nextToken()
        let right = parseExpression(Precedence.LOWEST)
        return ast.newAssignExpression(tok, target, right)
    }

    let parseIndexExpression = fn(left) {
        nextToken()
        let index = parseExpression(Precedence.LOWEST)
        let tok = currentToken

        if (!expectPeek("RBRACKET")) {
            return null
        }
        return ast.newIndexExpression(tok, left, index)
    }

    let parseExpressionList = fn(endTokenType) {
        let expressions = []
        if (peekTokenIs(endTokenType)) {
            nextToken()
            return expressions
        }
        nextToken()
        expressions = append(expressions, parseExpression(Precedence.LOWEST))

        while(fn(){peekTokenIs("COMMA")}, fn() {
            nextToken()
            nextToken()
            expressions = append(expressions, parseExpression(Precedence.LOWEST))
        })
        if (!expectPeek(endTokenType)) {
            return null
        }
        return expressions
    }

    let currentPrecedence = fn() {
        let p = precedences[TokenType[currentToken.tokenType]]
        if (p != null) {
            return p
        } 
        Precedence.LOWEST
    }

    let currentTokenIs = fn(tokenType) {
        currentToken.tokenType == tokenType
    }

    let peekPrecedence = fn() {
        let p = precedences[TokenType[peekToken.tokenType]]
        if (p != null) {
            return p
        } 
        Precedence.LOWEST
    }

    let expectPeek = fn(tokenType) {
        if(peekTokenIs(tokenType)) {
            // puts("---expectPeek before", peekToken)
            nextToken()
            // puts("---expectPeek after", peekToken)
            return true
        } else {
            // puts("---expectPeek wrong token. Have:", peekToken, "want:", tokenType)
            peekError(tokenType)
            return false
        }
    }

    let peekError = fn(tokenType) {
        let msg = "Expected next token to be " + tokenType + ", got " + peekToken.tokenType + " instead.";
        errors = append(errors, msg)
    }

    let peekTokenIs = fn(tokenType) {
        // puts("----peekTokenIs. expect: ", tokenType, "which is", TokenType[tokenType], "have", peekToken.tokenType)
        peekToken.tokenType == tokenType
    }

    return {
        "parseProgram": parseProgram
    }

}